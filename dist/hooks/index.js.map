{"version":3,"sources":["../../src/hooks/index.ts","../../src/hooks/useNormalizer.ts","../../src/hooks/useCheckClient.ts","../../src/hooks/useCopyToClipboard.ts","../../src/hooks/useScrollPosition.ts"],"sourcesContent":["import * as useNormalizer from \"./useNormalizer\";\nimport * as useCheckClient from \"./useCheckClient\";\nimport * as useCopyToClipboard from \"./useCopyToClipboard\";\nimport * as useScrollPosition from \"./useScrollPosition\";\n\nexport { useNormalizer, useCheckClient, useCopyToClipboard, useScrollPosition };\n// export default { useNormalizer, useCheckClient };\n","import { useMemo } from \"react\";\n// Converts an array of objects into an object keyed by the given property.\n\nexport function useNormalizer<\n  T extends Record<string, any>,\n  K extends keyof T\n>(items: T[], key: K): Record<string, T> {\n  return useMemo(() => {\n    return items.reduce((acc, item) => {\n      const k = String(item[key]); \n      if (!(k in acc)) {\n        acc[k] = item; \n      }\n      return acc;\n    }, {} as Record<string, T>);\n  }, [items, key]);\n}\n","import { useEffect, useState } from \"react\";\n\n\nexport function useCheckClient(): boolean {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return isClient;\n}\n","import { useState } from \"react\";\n\nexport function useCopyToClipboard() {\n  const [copiedText, setCopiedText] = useState<string | null>(null);\n\n  const copy = async (text: string) => {\n    if (!navigator?.clipboard) {\n      console.warn(\"Clipboard not supported\");\n      return false;\n    }\n\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedText(text);\n      return true;\n    } catch (error) {\n      console.warn(\"Copy failed\", error);\n      setCopiedText(null);\n      return false;\n    }\n  };\n\n  return { copiedText, copy };\n}\n","import { useEffect, useState } from \"react\";\n\nexport function useScrollPosition() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updatePosition = () => {\n      setPosition({\n        x: window.scrollX,\n        y: window.scrollY,\n      });\n    };\n\n    updatePosition();\n    window.addEventListener(\"scroll\", updatePosition, { passive: true });\n\n    return () => {\n      window.removeEventListener(\"scroll\", updatePosition);\n    };\n  }, []);\n\n  return position;\n}\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,EAAA,uBAAAC,EAAA,kBAAAC,EAAA,sBAAAC,IAAA,eAAAC,EAAAN,GCAA,IAAAO,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,IAAA,IAAAC,EAAwB,iBAGjB,SAASD,EAGdE,EAAYC,EAA2B,CACvC,SAAO,WAAQ,IACND,EAAM,OAAO,CAACE,EAAKC,IAAS,CACjC,IAAMC,EAAI,OAAOD,EAAKF,CAAG,CAAC,EAC1B,OAAMG,KAAKF,IACTA,EAAIE,CAAC,EAAID,GAEJD,CACT,EAAG,CAAC,CAAsB,EACzB,CAACF,EAAOC,CAAG,CAAC,CACjB,CChBA,IAAAI,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,IAAA,IAAAC,EAAoC,iBAG7B,SAASD,GAA0B,CACxC,GAAM,CAACE,EAAUC,CAAW,KAAI,YAAS,EAAK,EAE9C,sBAAU,IAAM,CACdA,EAAY,EAAI,CAClB,EAAG,CAAC,CAAC,EAEED,CACT,CCXA,IAAAE,EAAA,GAAAC,EAAAD,EAAA,wBAAAE,IAAA,IAAAC,EAAyB,iBAElB,SAASD,GAAqB,CACnC,GAAM,CAACE,EAAYC,CAAa,KAAI,YAAwB,IAAI,EAmBhE,MAAO,CAAE,WAAAD,EAAY,KAjBR,MAAOE,GAAiB,CACnC,GAAI,EAAC,2BAAW,WACd,eAAQ,KAAK,yBAAyB,EAC/B,GAGT,GAAI,CACF,aAAM,UAAU,UAAU,UAAUA,CAAI,EACxCD,EAAcC,CAAI,EACX,EACT,OAASC,EAAO,CACd,eAAQ,KAAK,cAAeA,CAAK,EACjCF,EAAc,IAAI,EACX,EACT,CACF,CAE0B,CAC5B,CCvBA,IAAAG,EAAA,GAAAC,EAAAD,EAAA,uBAAAE,IAAA,IAAAC,EAAoC,iBAE7B,SAASD,GAAoB,CAClC,GAAM,CAACE,EAAUC,CAAW,KAAI,YAAS,CAAE,EAAG,EAAG,EAAG,CAAE,CAAC,EAEvD,sBAAU,IAAM,CACd,IAAMC,EAAiB,IAAM,CAC3BD,EAAY,CACV,EAAG,OAAO,QACV,EAAG,OAAO,OACZ,CAAC,CACH,EAEA,OAAAC,EAAe,EACf,OAAO,iBAAiB,SAAUA,EAAgB,CAAE,QAAS,EAAK,CAAC,EAE5D,IAAM,CACX,OAAO,oBAAoB,SAAUA,CAAc,CACrD,CACF,EAAG,CAAC,CAAC,EAEEF,CACT","names":["hooks_exports","__export","useCheckClient_exports","useCopyToClipboard_exports","useNormalizer_exports","useScrollPosition_exports","__toCommonJS","useNormalizer_exports","__export","useNormalizer","import_react","items","key","acc","item","k","useCheckClient_exports","__export","useCheckClient","import_react","isClient","setIsClient","useCopyToClipboard_exports","__export","useCopyToClipboard","import_react","copiedText","setCopiedText","text","error","useScrollPosition_exports","__export","useScrollPosition","import_react","position","setPosition","updatePosition"]}